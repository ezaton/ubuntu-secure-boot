#!/bin/sh

# Here we override the original grub-install with a custom version that does a
# secure installation of GRUB.  For now, we don't support any of the original
# command line arguments of grub-install.  This is not a problem because the
# only package that automatically calls grub-install is GRUB itself.  GRUB
# only calls grub-install from the package postinst script.
#
# Therefore, we only need to deal with grub-install as called by its postinst:
#
# 1.  Our own package may not have been configured yet by the user; if this is
#     the case, then just pass through the original command.
#
# 2.  The arguments provided to us by the postinst are mostly meaningless and
#     mainly involve setting the target architecture.
#
# A key objective of this script is to make a self-contained/standalone,
# signed GRUB EFI image.  Standalone is critical, otherwise the security is
# easily defeated.  For example, an attacker could delete the detached
# signature files, let GRUB go to a rescue prompt, and then turn off
# check_signatures.

#set -e

# Load debconf: used for prompting for passphrase.
. /usr/share/debconf/confmodule

runsbsign() {
    # On Ubuntu 16.04, sbsign crashes randomly; this appears to be a
    # regression from Ubuntu 15.10:
    #
    #     https://bugs.launchpad.net/ubuntu/+source/sbsigntool/+bug/1574372
    #     sbsign crashes randomly
    for attemptnum in $( seq 1 50 ) ; do
        if sbsign "$@" ; then
            return 0
        fi
        echo "Retry..."
    done
    echo "Failed!"
    return 1
}

# We can't probe key directory unless we're root.
if ! [ $(id -u) = 0 ]; then
    echo "ERROR:  grub-install must be run as root."
    exit 1
fi

# Some particularly platform-specific variables:
EFI_FILENAME=securegrubx64.efi   # EFI image name
BOOTLOADER_ID=ubuntu             # EFI directory on EFI partition
FORMAT=x86_64-efi                # grub --format

KEYDIR=/etc/ubuntu-secure-boot/keys
export GNUPGHOME="$KEYDIR"

# Temporary file cleanup
Cleanup () {
    if [ -n "$GPGPUBLICKEY" ] ; then
        rm -f "$GPGPUBLICKEY"
    fi
    if [ -n "$GRUBSTAGE" ] ; then
        rm -rf "$GRUBSTAGE"
    fi
    if [ -n "$PASSPHRASEFILE" ] ; then
        rm -f "$PASSPHRASEFILE"
    fi
    if [ -n "$PEMPRIVATEKEY" ] ; then
        rm -f "$PEMPRIVATEKEY"
    fi
}

# Obtain passphrase from user:
GetPassphrase() {
    # Ask user for passphrase: note that we die if return code is 30,
    # indicating that the user won't be asked the question:
    db_settitle ubuntu-secure-boot/title
    db_reset ubuntu-secure-boot/passphrase
    db_fset ubuntu-secure-boot/passphrase seen false
    db_input critical ubuntu-secure-boot/passphrase
    db_go
    db_get ubuntu-secure-boot/passphrase
    PASSPHRASE="$RET"
    # Always reset the password so that it doesn't remain behind:
    db_reset ubuntu-secure-boot/passphrase
}

# Ask if the user wants to retry entering passphrase:
RetryPassphrase() {
    db_settitle ubuntu-secure-boot/title
    db_reset ubuntu-secure-boot/retrypassphrase
    db_fset ubuntu-secure-boot/retrypassphrase seen false
    db_input critical ubuntu-secure-boot/retrypassphrase
    db_go
    db_get ubuntu-secure-boot/retrypassphrase
    if [ "$RET" != true ] ; then
        exit 1
    fi
}

passphrase_ok() {
    # Shorten the script and tidy up
    PASSPHRASEOK=0
    while [ "$PASSPHRASEOK" -eq 0 ] ; do
        GetPassphrase
        # Test signing to make sure passphrase is ok
        echo "$PASSPHRASE" > "$PASSPHRASEFILE"
        if ! : | gpg --batch --pinentry-mode loopback -u "$KEYID" --passphrase-file "$PASSPHRASEFILE" \
            -o - -as - > /dev/null
        then
            RetryPassphrase
        else
            PASSPHRASEOK=1
        fi
    done
}

create_grub_standalone() {
    # Creates grub-standalone
    rm -f "$GRUBSTAGE"/boot/grub/*/*.efi
    rm -f "$GRUBSTAGE"/boot/grub/*/grub.cfg
    [ ! -d ${GRUBSTAGE}/boot/grub ] && mkdir -p ${GRUBSTAGE}/boot/grub

    # Copy GRUB configuration; don't fail if it doesn't exist (this could
    # happen on an initial GRUB installation):
    set +e
    [ ! -f /etc/ubuntu-secure-boot/grub.cfg ] && cp /boot/efi/EFI/$BOOTLOADER_ID/grub.cfg /etc/ubuntu-secure-boot/
    cp /etc/ubuntu-secure-boot/grub.cfg "$GRUBSTAGE/boot/grub/grub.cfg"
    # set -e

    # Sign GRUB files
    echo "Signing GRUB configuration files"
    for file in /boot/grub/grub.cfg $GRUBSTAGE/boot/grub/grub.cfg
    do
        gpg --batch --yes --pinentry-mode loopback -u "$KEYID" --detach-sign \
        --passphrase-file "$PASSPHRASEFILE" $file 
    done


    grub_modules="$(ls /usr/lib/grub/x86_64-efi/*.mod | awk -F / '{print $NF}' |  sed 's/\.mod//g')"
    grub-mkstandalone --disable-shim-lock --directory="/usr/lib/grub/x86_64-efi" --format="x86_64-efi" --output="$GRUBSTAGE/$EFI_FILENAME" --locales="en@quot" --themes="" --modules="$grub_modules" --pubkey=$GPGPUBLICKEY "boot/grub/grub.cfg=$GRUBSTAGE/boot/grub/grub.cfg" "boot/grub/grub.cfg.sig=$GRUBSTAGE/boot/grub/grub.cfg.sig" -v


    # Save db.key OpenSSL key to an unencrypted file (remove passphrase):
    openssl rsa -in "$KEYDIR/db.key" -out "$PEMPRIVATEKEY" -passin stdin \
        << EOFPASSPHRASEEOF
$PASSPHRASE
EOFPASSPHRASEEOF

    # Sign the EFI image into final output location.
    echo "Signing GRUB image..."
    runsbsign --key "$PEMPRIVATEKEY" --cert "$KEYDIR/db.crt" \
        --output /boot/efi/EFI/$BOOTLOADER_ID/$EFI_FILENAME \
        "$GRUBSTAGE/$EFI_FILENAME"

    # Delete existing bootloader entries from firmware:
    echo "Adding bootloader to EFI configuration..."
    set +e
    efibootmgr | grep -i "$BOOTLOADER_ID" | cut -c 5-8 | xargs -n 1 -r \
        efibootmgr --quiet --delete-bootnum --bootnum
    # set -e
    # Add new bootloader entry:
    DEVICE="$(df -T /boot/efi | sed -n 2p | awk '{ print $1}')"
    DISK="$(echo "$DEVICE" | sed 's|[0-9]||g')"
    PARTNUM="$(echo "$DEVICE" | sed 's|[^0-9]||g')"
    efibootmgr --quiet --create --disk "$DISK" --part "$PARTNUM" \
        --write-signature --label "$BOOTLOADER_ID" \
        --loader "\\EFI\\$BOOTLOADER_ID\\$EFI_FILENAME"
}

extract_keys() {
    # Extract GPG keys
    # Temporary files:
    GPGPUBLICKEY="$(mktemp)"
    GRUBSTAGE="$(mktemp -d)"
    PASSPHRASEFILE="$(mktemp)"
    PEMPRIVATEKEY="$(mktemp)"
    trap Cleanup EXIT INT TERM

    # Extract public key:
    KEYID="$(gpg -k --with-colons | grep "Ubuntu secure boot EFI key" \
        | cut -d : -f 10)"
    gpg --batch --yes --output "$GPGPUBLICKEY" --export "$KEYID"
}

gpg_verify_file() {
    # Skip if file has .sig in suffix, so we never sign
    local file="$1"
    [ "`echo -n $file | tail -c 4`" = ".sig" ] && return 0
    gpg --verify ${file}.sig ${file} 2> /dev/null
    return $?
}

# Does key directory exist?
if [ -d "$KEYDIR" ] && gpg -K --with-colons | \
    grep -q "Ubuntu secure boot EFI key" && \
    [ -e "$KEYDIR/db.crt" -a -e "$KEYDIR/db.key" ]
then
    extract_keys
    # We need to recreate grub-standalone when grub.cfg has changed, or when we are having initial run
    # Check if grub.cfg has changed:
    gpg_verify_file /boot/grub/grub.cfg
    GRUBCONF_CHANGED=$?  # 0 means no

    if [ ! -f /boot/efi/EFI/$BOOTLOADER_ID/$EFI_FILENAME -o ${GRUBCONF_CHANGED} != 0 ]
    then
        # We have to run the whole signing process, and creation of grub_standalone
        passphrase_ok
        create_grub_standalone
    fi

    if [ "$SECURE_BOOT_KERNEL_ACTION" = postinst -a \
        "$SECURE_BOOT_KERNEL_HOOK" = 1 ]
    then
        # Calculate path to kernel:
        if [ -z "$SECURE_BOOT_KERNEL_PATH" ] ; then
            SECURE_BOOT_KERNEL_PATH="/boot/vmlinuz-$SECURE_BOOT_KERNEL_ABI"
            if [ ! -e "$SECURE_BOOT_KERNEL_PATH" ] ; then
                SECURE_BOOT_KERNEL_PATH="/boot/vmlinux-$SECURE_BOOT_KERNEL_ABI"
            fi
        fi
        # If SECURE_BOOT_SIGNED_SOURCE is set, then that is a kernel that we
        # already signed with a detached signature.  We will copy it to the
        # destination location, using sbsign to sign it with that, and then
        # sign the result.  The source file must already have a gpg signature
        # on it.  This is intended for use with linux-signed-image packages
        # (see comments in update-grub).
        echo "Signing kernel or initrd at $SECURE_BOOT_KERNEL_PATH"
        if [ -n "$SECURE_BOOT_SIGNED_SOURCE" ] ; then
            # Check source signature
            gpg --verify "${SECURE_BOOT_SIGNED_SOURCE}.sig" \
                "$SECURE_BOOT_SIGNED_SOURCE"

            # Copy and sign it to destination with sbsign:
            runsbsign --key "$PEMPRIVATEKEY" --cert "$KEYDIR/db.crt" \
                --output "$SECURE_BOOT_KERNEL_PATH" \
                "$SECURE_BOOT_SIGNED_SOURCE"
        fi
        # Now sign the final output with gpg:
        if [ -e "$SECURE_BOOT_KERNEL_PATH" ] ; then
            # Could be initramfs
            # Do not sign files already correctly signed
            if ! gpg_verify_file $SECURE_BOOT_KERNEL_PATH
            then
                [ -z "${PASSPHRASEOK}" ] && passphrase_ok
                gpg --yes --batch --pinentry-mode loopback -u "$KEYID" --detach-sign \
                    --passphrase-file "$PASSPHRASEFILE" "$SECURE_BOOT_KERNEL_PATH"
            fi
        fi
    elif [ "$SECURE_BOOT_KERNEL_ACTION" = postrm -a \
        "$SECURE_BOOT_KERNEL_HOOK" = 1 ]
    then
        # Remove any detached signatures from the uninstalled kernel.
        if [ -z "$SECURE_BOOT_KERNEL_PATH" ] ; then
            rm -f "/boot/vmlinuz-${SECURE_BOOT_KERNEL_ABI}.sig"
            rm -f "/boot/vmlinux-${SECURE_BOOT_KERNEL_ABI}.sig"
        else
            rm -f "${SECURE_BOOT_KERNEL_PATH}.sig"
        fi
    fi

    # If --sign-all flag is passed, sign all installed kernels and initramfs.
    # This assumes that whatever is on /boot is trustworthy.  Intended for use
    # only from make-secure-boot-keys.
    if [ "$1" = --sign-all ] ; then
        for file in /boot/vmlinux-* /boot/vmlinuz-* /boot/initrd* ; do
            [ -e "$file" ] || continue # in case no matches
            case "$file" in
                *.sig)
                    # Detached signature file; ignore.
                    continue
                ;;
            esac
            echo "Signing kernel or initrd at $file"
            case "$file" in
                *.efi.signed)
                    # This is supposed to be an Authenticode-signed kernel.
                    runsbsign --key "$PEMPRIVATEKEY" --cert "$KEYDIR/db.crt" \
                        --output "$file" "$file"
                ;;
            esac
            # Sign final output with gpg:
            if ! gpg_verify_file $file
            then
                # Do not sign files already correctly signed 
                [ -z "${PASSPHRASEOK}" ] && passphrase_ok
                gpg --yes --batch --pinentry-mode loopback -u "$KEYID" --detach-sign \
                    --passphrase-file "$PASSPHRASEFILE" "$file"
            fi
        done
    fi

    # Remove junk from /boot from the original GRUB packages.  These files are
    # not secured, so keeping them around is not helpful.  If this package is
    # uninstalled, our postrm will rerun original GRUB commands to restore
    # them.
    echo "Removing non-secure GRUB boot files..."
    rm -f "/boot/efi/EFI/$BOOTLOADER_ID/grub.cfg"
    rm -f "/boot/efi/EFI/$BOOTLOADER_ID/grubx64.efi"
    rm -f "/boot/efi/EFI/$BOOTLOADER_ID/MokManager.efi"
    rm -f "/boot/efi/EFI/$BOOTLOADER_ID/shimx64.efi"
    rm -rf /boot/grub/fonts
    rm -rf /boot/grub/locale
    rm -rf /boot/grub/x86_64-efi
    rm -rf /boot/grub/grubenv
    rm -rf /boot/grub/unicode.pf2
    #: > /boot/grub/grub.cfg

    exit 0
fi

echo "WARNING:  No signing keys found.  Running original grub-install..."

grub-install.distrib "$@"
