#!/bin/sh

# Run this script after installing the package to make your private keys for
# secure booting.  They are stored in /etc/ubuntu-secure-boot/keys.  This
# allows convenient signing of new kernels, GRUB versions, etc.  It's
# recommended that your /etc partition is encrypted.

set -e

EntropySetup() {
    # It's helpful to run a background process to come up with entropy.  We do
    # so by generating lots of disk activity.  This is particularly handy on
    # systems that otherwise lack entropy (e.g. a clean Ubuntu install in a
    # virtual machine).
    echo
    printf "%s" "Run a background process to generate entropy? [n] "
    read RUN_BACKGROUND
    STARTED_ENTROPY=0
    if [ "$RUN_BACKGROUND" = y ] ; then
        echo "Starting background entropy process..."
        ( set +e
        while : ; do
            echo -n .
            echo 3 > /proc/sys/vm/drop_caches
            ls / -R > /dev/null 2> /dev/null
        done ) &
        ENTROPY_PID=$!
        STARTED_ENTROPY=1
        trap Cleanup EXIT INT TERM
    fi
}

CleanupEntropy() {
    if [ "$STARTED_ENTROPY" = 1 ] ; then
        kill $ENTROPY_PID
    fi
    STARTED_ENTROPY=0
}

Cleanup() {
    CleanupEntropy
    stty echo
    if [ -n "$SSLCFG" ] ; then
        rm "$SSLCFG"
    fi
    if [ -n "$TEMPKEYFILE" ] ; then
        rm "$TEMPKEYFILE"
    fi
}

# Param 1: Variable
# Param 2: First prompt
# Param 3: Second prompt
# Param 4: Mismatch error
# Param 5: Empty password warning
GetPassword() {
    stty -echo
    printf "%s" "$2"
    read READPASSWORD1
    echo
    printf "%s" "$3"
    read READPASSWORD2
    echo
    stty echo
    if [ "$READPASSWORD1" != "$READPASSWORD2" ] ; then
        echo "$4"
        exit 1
    fi
    if [ -z "$READPASSWORD1" ] ; then
        echo "$5"
    fi
    eval $1=\"\$READPASSWORD1\"
}

if ! [ $(id -u) = 0 ]; then
    echo "ERROR:  make-secure-boot-keys must be run as root."
    exit 1
fi

# Set cleanup routine
unset SSLCFG
unset TEMPKEYFILE
unset STARTED_ENTROPY
trap Cleanup EXIT INT TERM

# Some particularly platform-specific variables:
BOOTLOADER_ID=ubuntu             # EFI directory on EFI partition

echo "Private keys will be stored in /etc/ubuntu-secure-boot/keys"
echo "WARNING:  It's recommended that you put your /etc" \
     "directory on an encrypted file system."

# Create and secure the key directory
KEYDIR=/etc/ubuntu-secure-boot/keys
mkdir -p "$KEYDIR"
chmod 700 "$KEYDIR"
chown root:root "$KEYDIR"
export GNUPGHOME="$KEYDIR"

# If keys already exist, ask if they want to make new ones.
HASGPGKEY=0
if gpg -K | grep -q "Ubuntu secure boot EFI key" ; then
    HASGPGKEY=1
fi
HASUEFIKEY=0
for file in PK.crt  PK.key  PK.cer  PK.esl  PK.auth \
            KEK.crt KEK.key KEK.cer KEK.esl KEK.auth \
            DB.crt  DB.key  DB.cer  DB.esl  DB.auth
do
    if [ -e "$KEYDIR/$file" ] ; then
        HASUEFIKEY=1
    fi
done
SKIPKEYGEN=0
if [ $HASGPGKEY -ne 0 -o $HASUEFIKEY -ne 0 ] ; then
    echo
    printf "%s" "Secure boot key files already exist.  Overwrite them? [n] "
    read OVW
    SKIPKEYGEN=1
    if [ "$OVW" = y -o "$OVW" = Y ] ; then
        SKIPKEYGEN=0
    fi
fi

KEYSCHANGED=0

if [ $SKIPKEYGEN -eq 0 ] ; then
    # Get key information:
    echo
    echo "GPG KEY GENERATION:  Used for signing GRUB modules and Linux kernels."
    echo
    printf "%s" "Enter your full name: "
    read USERFULLNAME
    printf "%s" "Enter your e-mail address: "
    read USEREMAIL
    echo
    echo "Please confirm the following key information by typing \"yes\" below:"
    echo "$USERFULLNAME <$USEREMAIL>"
    read CONFIRMATION
    if [ "$CONFIRMATION" != yes ] ; then
        exit 1
    fi

    GetPassword PASSPHRASE "Enter a passphrase for the new keys: " \
        "Enter the passphrase again: " "Passphrases do not match!" \
        "WARNING:  Keys are not protected by a passphrase."
    if [ -n "$PASSPHRASE" ] ; then
        PPPARAM="Passphrase: $PASSPHRASE"
    else
        PPPARAM=""
    fi

    EntropySetup

    rm -f "$KEYDIR"/*.gpg*
    rm -f "$KEYDIR"/random-seed

    # Generate GPG private key: used for signing files loaded by GRUB.
    gpg --gen-key --batch << GPGEOF
        Key-Type: RSA
        Key-Length: 4096
        Key-Usage: sign
        Name-Real: $USERFULLNAME
        Name-Comment: Ubuntu secure boot EFI key
        Name-Email: $USEREMAIL
        Expire-Date: 0
        $PPPARAM
GPGEOF
    CleanupEntropy
    echo "GPG key generation successful!"

    # UEFI key generation...
    # Reference: http://www.rodsbooks.com/efi-bootloaders/controlling-sb.html
    # Managing EFI Boot Loaders for Linux: Controlling Secure Boot
    # Get key information:
    echo
    echo "UEFI KEY GENERATION"
    echo
    printf "%s" "Enter a common name for the keys (e.g. your name): "
    read COMMONNAME

    EntropySetup

    SSLCFG="$(mktemp)"
    cat > "$SSLCFG" << EOF
[req]
distinguished_name = reqdn
x509_extensions = reqx509

[reqdn]

[reqx509]
subjectKeyIdentifier = hash
# CA must be false because we are directly signing objects with this key:
basicConstraints = critical,CA:false
keyUsage = digitalSignature
extendedKeyUsage = codeSigning
EOF

    # UEFI Secure Boot keys must be 2048-bit RSA:
    # -x509: generate self-signed certificate
    if [ -n "$PASSPHRASE" ] ; then
        PASSPARAMS="-passout stdin"
    else
        PASSPARAMS="-nodes" # don't encrypt private key
    fi
    openssl req -new -x509 -newkey rsa:2048 -subj "/CN=$COMMONNAME PK/" \
        -days 3650 -sha256 -config "$SSLCFG" $PASSPARAMS \
        -keyout "$KEYDIR/PK.key" -out "$KEYDIR/PK.crt" << EOFPASSPHRASEEOF
$PASSPHRASE
EOFPASSPHRASEEOF
    openssl req -new -x509 -newkey rsa:2048 -subj "/CN=$COMMONNAME KEK/" \
        -days 3650 -sha256 -config "$SSLCFG" $PASSPARAMS \
        -keyout "$KEYDIR/KEK.key" -out "$KEYDIR/KEK.crt" << EOFPASSPHRASEEOF
$PASSPHRASE
EOFPASSPHRASEEOF
    openssl req -new -x509 -newkey rsa:2048 -subj "/CN=$COMMONNAME db/" \
        -days 3650 -sha256 -config "$SSLCFG" $PASSPARAMS \
        -keyout "$KEYDIR/db.key" -out "$KEYDIR/db.crt" << EOFPASSPHRASEEOF
$PASSPHRASE
EOFPASSPHRASEEOF

    # Convert to DER format (required by some UEFI platforms)
    openssl x509 -in "$KEYDIR/PK.crt"  -out "$KEYDIR/PK.cer"  -outform DER
    openssl x509 -in "$KEYDIR/KEK.crt" -out "$KEYDIR/KEK.cer" -outform DER
    openssl x509 -in "$KEYDIR/db.crt"  -out "$KEYDIR/db.cer"  -outform DER

    # Generate a GUID to identify the keys.
    GUID="$(uuidgen)"
    echo $GUID > "$KEYDIR/GUID.txt"

    # Generate EFI signature lists (required for some firmwares)
    cert-to-efi-sig-list -g $GUID "$KEYDIR/PK.crt"  "$KEYDIR/PK.esl"
    cert-to-efi-sig-list -g $GUID "$KEYDIR/KEK.crt" "$KEYDIR/KEK.esl"
    cert-to-efi-sig-list -g $GUID "$KEYDIR/db.crt"  "$KEYDIR/db.esl"
    # NOTE:  Having a "noPK" list that erases the PK, as suggested in the above
    # reference link, isn't a safe thing to have sitting around.  So, we don't
    # generate it.  If you want to change the PK, you can always go back to
    # setup mode in your firmware...

    # Generate authorized updates to change the EFI variables; note:
    #
    # sign-efi-sig-list doesn't support specifying passphrase on command line,
    # so we have to temporarily strip the private keys of their passphrases:
    TEMPKEYFILE="$(mktemp)"
    openssl rsa -in "$KEYDIR/PK.key" -out "$TEMPKEYFILE" -passin stdin \
        << EOFPASSPHRASEEOF
$PASSPHRASE
EOFPASSPHRASEEOF
    sign-efi-sig-list -k "$TEMPKEYFILE" -c "$KEYDIR/PK.crt" \
                      PK "$KEYDIR/PK.esl" "$KEYDIR/PK.auth"
    sign-efi-sig-list -k "$TEMPKEYFILE" -c "$KEYDIR/PK.crt" \
                      KEK "$KEYDIR/KEK.esl" "$KEYDIR/KEK.auth"
    openssl rsa -in "$KEYDIR/KEK.key" -out "$TEMPKEYFILE" -passin stdin \
        << EOFPASSPHRASEEOF
$PASSPHRASE
EOFPASSPHRASEEOF
    sign-efi-sig-list -k "$TEMPKEYFILE" -c "$KEYDIR/KEK.crt" \
                      KEK "$KEYDIR/db.esl" "$KEYDIR/db.auth"
    [ ! -d /boot/efi/certs ] && mkdir /boot/efi/certs 
    cp "$KEYDIR"/*.cer "$KEYDIR"/*.esl "$KEYDIR"/*.auth \
        /boot/efi/certs/

    CleanupEntropy

    KEYSCHANGED=1
fi

# If GRUB password already exists, ask if they want a new one.
HASGRUBUSER=0
if [ -e /etc/grub.d/01_grub_secure_boot_password ] ; then
    HASGRUBUSER=1
fi
SKIPGRUBUSER=0
if [ $HASGRUBUSER -ne 0 ] ; then
    echo
    printf "%s %s %s" "Grub user file" \
           "(/etc/grub.d/01_grub_secure_boot_password)" \
           "already exists.  Overwrite it to change the GRUB password? [n] "
    read OVW
    SKIPGRUBUSER=1
    if [ "$OVW" = y -o "$OVW" = Y ] ; then
        SKIPGRUBUSER=0
    fi
fi

GRUBUSERCHANGED=0

if [ $SKIPGRUBUSER -eq 0 ] ; then
    # Get GRUB user information:
    echo
    echo "GRUB USER INFORMATION:  Used to secure the GRUB user interface."
    echo
    printf "%s" "Enter GRUB supervisor username: [root] "
    read GRUBUSER
    if [ -z "$GRUBUSER" ] ; then
        GRUBUSER=root
    fi

    GetPassword GRUBPASSWORD "Enter supervisor password: " \
        "Enter supervisor password again: " "Passwords do not match!" \
        "WARNING:  The GRUB bootloader is not protected by a password."

    # Hash the password
    GRUBPASSWORDHASH="$(grub-mkpasswd-pbkdf2 --iteration-count=250000 \
<< EOFGRUBPASSWORD
$GRUBPASSWORD
$GRUBPASSWORD
EOFGRUBPASSWORD
)"
    GRUBPASSWORDHASH="$(echo "$GRUBPASSWORDHASH" | \
        grep -o "grub\.pbkdf2.*")"

    cat > /etc/grub.d/01_grub_secure_boot_password << EOFGRUBSCRIPT
#!/bin/sh
exec tail -n +3 \$0
password_pbkdf2 "$GRUBUSER" $GRUBPASSWORDHASH
set superusers="$GRUBUSER"
EOFGRUBSCRIPT
    chmod +x /etc/grub.d/01_grub_secure_boot_password

    GRUBUSERCHANGED=1
fi


if [ $KEYSCHANGED -ne 0 ] ; then
    # Sign new GRUB installation:
    export SECURE_BOOT_SIGN_ALL=1
    update-grub

    echo "UEFI key generation successful!  The public keys have been copied to" \
         "/boot/efi/certs/.  You must now install the keys" \
         "onto your firmware.  It's recommended to use the .esl or .auth" \
         "files instead of the .cer files, to prevent firmware from" \
         "generating a GUID for your keys.  You can use your firmware's" \
         "setup, or use the KeyTool.efi program from the efitools package."
elif [ $GRUBUSERCHANGED -ne 0 ] ; then
    # Update GRUB, but don't sign all kernels since we didn't change keys.
    update-grub
fi
