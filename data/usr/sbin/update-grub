#!/bin/sh

# Here we override the original update-grub with a custom version for securing
# GRUB.  This is required for two reasons:
#
# 1.  The /boot partition might not be encrypted, so storing grub.cfg there is
#     not a good plan.  Whereas, we advise the user to use full disk
#     encryption, so we can assume /etc/ubuntu-secure-boot is a safe place to
#     store grub.cfg.
#
# 2.  The full configuration is embedded inside of a single standalone EFI
#     GRUB image for security reasons.  Additionally, it must be signed.
#     Therefore, after configuration, we must call our custom grub-install.

set -e

# We can't probe key directory unless we're root.
if ! [ $(id -u) = 0 ]; then
    echo "ERROR:  update-grub must be run as root."
    exit 1
fi

# grub-install requires use of debconf, but inexplicably, if we're called from
# the postinst of grub-efi-amd64, they explicitly delete file descriptor 3
# after initializing debconf.  This, of course, totally breaks debconf.  This
# special code checks if debconf was redirected in the past and fd 3 doesn't
# currently exist.
if [ -n "$DEBCONF_REDIR" -a \( ! -e /proc/$$/fd/3 \) -a -e /proc/$PPID/fd/3 ]
then
    # Grovel into their process to get to the file descriptor that they deleted
    # out from under us.
    exec 3>/proc/$PPID/fd/3
fi

# Pick config path based on whether the key directory exists, according
# to the logic in our custom grub-install.
KEYDIR=/etc/ubuntu-secure-boot/keys
export GNUPGHOME="$KEYDIR"

# Does key directory exist?
if [ -d $KEYDIR ] && gpg -K --with-colons | \
    grep -q "Ubuntu secure boot EFI key"
then
    # Test if we are being called from a linux-signed-image package.  These
    # Ubuntu packages contain a detached Canonical signature to sign the
    # already-installed Linux kernel.  This is done in their postinst script.
    # Ubuntu's GRUB scripts will then similarly prefer this Canonical-signed
    # image if it exists when generating the GRUB menu.
    #
    # We need to sign this image with our own keys instead of Canonical's.
    # Here we detect if we are being called from linux-signed-image postinst,
    # and, if so, set flags to control grub-install's kernel signing behavior.
    PARENTCOMMAND="$(ps -o command= $PPID)"
    for postfix in postinst postrm ; do
        if echo "$PARENTCOMMAND" | grep -q \
            "linux-signed-image-.*\.$postfix"
        then
            KERNEL_VERSION="$(echo "$PARENTCOMMAND" | grep -o \
                "linux-signed-image-.*\.$postfix" | \
                sed -e "s/^linux-signed-image-//" -e "s/\.$postfix\$//")"
            # These magic variables are recognized by grub-install to get it to
            # sign a kernel.
            export SECURE_BOOT_KERNEL_HOOK=1
            export SECURE_BOOT_KERNEL_PATH=\
"/boot/vmlinuz-${KERNEL_VERSION}.efi.signed"
            export SECURE_BOOT_KERNEL_ACTION=$postfix
            export SECURE_BOOT_SIGNED_SOURCE=\
"/boot/vmlinuz-${KERNEL_VERSION}"
        fi
    done

    # Now, regenerate configuration and rerun grub-install.
    unset GNUPGHOME # in case a user config script uses GPG
    grub-mkconfig -o /boot/grub/grub.cfg "$@"
    cp -f /boot/grub/grub.cfg /etc/ubuntu-secure-boot/grub.cfg
    #grub-mkconfig -o /etc/ubuntu-secure-boot/grub.cfg "$@"
    if [ "$SECURE_BOOT_SIGN_ALL" = 1 ] ; then
        grub-install --sign-all
    else
        grub-install
    fi
    # Some packages test for /boot/grub/grub.cfg in their maintenance scripts.
    # Just make sure the file exists.
    touch /boot/grub/grub.cfg
else
    unset GNUPGHOME # in case a user config script uses GPG
    # Our grub-install is going to call the original grub-install because the
    # user has not set up keys yet.  Therefore, we have to use the original
    # location.
    grub-mkconfig -o /boot/grub/grub.cfg "$@"
fi
